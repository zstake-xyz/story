import os
import time
import requests
import subprocess
from datetime import timedelta

def get_rpc_port():
    config_path = os.path.expanduser("~/.story/story/config/config.toml")
    with open(config_path, 'r') as file:
        for line in file:
            if line.startswith('laddr'):
                return line.split(':')[2].strip().strip('"')

def get_block_height(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return int(response.json()['result']['sync_info']['latest_block_height'])
    except (requests.RequestException, ValueError, KeyError):
        return None

def main():
    rpc_port = get_rpc_port()
    if not rpc_port:
        print("\033[1;31mError: Unable to find RPC port.\033[0m")
        return

    while True:
        local_height = get_block_height(f"http://localhost:{rpc_port}/status")
        network_height = get_block_height("https://story-testnet-rpc.zstake.xyz/status")

        if local_height is None or network_height is None:
            print("\033[1;31mError: Invalid block height data. Retrying...\033[0m")
            time.sleep(5)
            continue

        blocks_left = max(0, network_height - local_height)
        sync_time_left = timedelta(seconds=blocks_left * 5)  # Assuming 5 seconds per block

        print(f"\033[1;33mYour Node Height:\033[1;34m {local_height}\033[0m "
              f"\033[1;33m| Network Height:\033[1;36m {network_height}\033[0m "
              f"\033[1;33m| Blocks Left:\033[1;31m {blocks_left}\033[0m "
              f"\033[1;33m| Estimated Time Left:\033[1;32m {sync_time_left}\033[0m")

        time.sleep(5)

if __name__ == "__main__":
    main()
